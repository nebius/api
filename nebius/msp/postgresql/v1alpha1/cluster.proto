syntax = "proto3";

package nebius.msp.postgresql.v1alpha1;

import "buf/validate/validate.proto";
import "nebius/common/v1/metadata.proto";
import "nebius/msp/v1alpha1/cluster.proto";
import "nebius/msp/postgresql/v1alpha1/config/postgresql.proto";
import "nebius/msp/postgresql/v1alpha1/preset.proto";
import "nebius/msp/postgresql/v1alpha1/template.proto";
import "nebius/msp/v1alpha1/resource/template.proto";
import "nebius/annotations.proto";

option go_package = "github.com/nebius/gosdk/proto/nebius/msp/postgresql/v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "ClusterProto";
option java_package = "ai.nebius.pub.msp.postgresql.v1alpha1";

message Cluster {
  common.v1.ResourceMetadata metadata = 1 [(buf.validate.field).required = true];

  ClusterSpec spec = 2 [(buf.validate.field).required = true];

  ClusterStatus status = 3 [(field_behavior) = OUTPUT_ONLY];
}

message ConnectionPoolerConfig {
  enum PoolingMode {
    POOLING_MODE_UNSPECIFIED = 0;

    // Session pooling mode.
    SESSION = 1;

    // Transaction pooling mode.
    TRANSACTION = 2;
  }

  // Mode that the connection pooler is working in.
  PoolingMode pooling_mode = 1;

  // Maximum number of connections in the pool for a single database.
  optional int64 max_pool_size = 2 [(buf.validate.field) = { int64: { lte: 12800, gte: 5 } }];
}

message ClusterSpec {
  // Description of the PostgreSQL cluster.
  string description = 1 [
    (field_behavior) = IMMUTABLE,
    (buf.validate.field) = { string: { max_len: 256 } }
  ];

  // Network ID in which the cluster is created.
  string network_id = 6 [(field_behavior) = IMMUTABLE, (buf.validate.field).required = true];

  ConfigSpec config = 3 [(buf.validate.field).required = true];

  BootstrapSpec bootstrap = 4 [(buf.validate.field).required = true];

  BackupSpec backup = 5 [(field_behavior) = IMMUTABLE];
}

message ClusterStatus {
  // Current phase of the cluster.
  nebius.msp.v1alpha1.ClusterStatus.Phase phase = 1;

  // State reflects substatus of the phase to define whether it's healthy or not.
  nebius.msp.v1alpha1.ClusterStatus.State state = 2;

  // Cluster resource preset details
  nebius.msp.v1alpha1.resource.PresetDetails preset_details = 4;

  // Connection endpoints of the PostgreSQL cluster.
  Endpoints connection_endpoints = 5;
}

message Endpoints {
  // Read write endpoint of the PostgreSQL cluster accessible from the private VPC.
  string private_read_write = 1 [(field_behavior) = OUTPUT_ONLY];

  // Read only endpoint of the PostgreSQL cluster accessible from the private VPC.
  string private_read_only = 2 [(field_behavior) = OUTPUT_ONLY];

  // Read write endpoint of the PostgreSQL cluster accessible from the internet.
  string public_read_write = 3 [(field_behavior) = OUTPUT_ONLY];

  // Read only endpoint of the PostgreSQL cluster accessible from the internet.
  string public_read_only = 4 [(field_behavior) = OUTPUT_ONLY];
}

message ConfigSpec {
  // Version of PostgreSQL used in the cluster.
  // Possible values: `16`
  string version = 1 [(buf.validate.field).required = true, (field_behavior) = IMMUTABLE];

  // Configuration of the connection pooler.
  ConnectionPoolerConfig pooler_config = 2;

  // Resources allocated to PostgreSQL hosts.
  PresetSpec resources = 3 [deprecated = true]; // use template instead

  // Config of the PostgreSQL cluster.
  oneof config {
    // Configuration parameters for postgres
    config.PostgresqlConfig16 postgresql_config_16 = 4;
  }

  // Either make cluster public accessible or accessible only via private VPC.
  bool public_access = 5;

  // Resources allocated to PostgreSQL hosts.
  TemplateSpec template = 7;
}

message BootstrapSpec {
  // Name of the bootstrap PostgreSQL user.
  string user_name = 1 [
    (field_behavior) = IMMUTABLE,
    (buf.validate.field) = {
      cel: [
        {
          id: "user_name.min_length",
          message: "User name must be at least 1 characters long.",
          expression: "size(this) >= 1"
        },
        {
          id: "user_name.max_length",
          message: "User name must not exceed 63 characters.",
          expression: "size(this) <= 63"
        },
        {
          id: "user_name.pattern",
          message: "User name must match the pattern: '^[a-zA-Z0-9_][a-zA-Z0-9_-]*$'",
          expression: "this.matches('^[a-zA-Z0-9_][a-zA-Z0-9_-]*$')"
        }
      ],
      required: true
    }
  ];

  // Password of the bootstrap PostgreSQL user.
  string user_password = 2 [(field_behavior) = INPUT_ONLY, (sensitive) = true];

  // Name of the PostgreSQL database. 1-63 characters long.
  string db_name = 3 [
    (field_behavior) = IMMUTABLE,
    (buf.validate.field) = {
      cel: [
        {
          id: "db_name.min_length",
          message: "Database name must be at least 1 characters long.",
          expression: "size(this) >= 1"
        },
        {
          id: "db_name.max_length",
          message: "Database name must not exceed 63 characters.",
          expression: "size(this) <= 63"
        },
        {
          id: "db_name.pattern",
          message: "Database name must match the pattern: '^[a-zA-Z0-9_][a-zA-Z0-9_-]*$'",
          expression: "this.matches('^[a-zA-Z0-9_][a-zA-Z0-9_-]*$')"
        }
      ],
      required: true
    }
  ];
}

message BackupSpec {
  // Backup window start in "HH:MM:SS" format (UTC Time)
  string backup_window_start = 1;

  // Retention policy to be used for backups and WALs (i.e. '7d')
  string retention_policy = 2;
}

syntax = "proto3";

package nebius.vpc.v1;

import "buf/validate/validate.proto";
import "nebius/annotations.proto";
import "nebius/common/v1/metadata.proto";
import "nebius/vpc/v1/pool.proto";

option go_package = "github.com/nebius/gosdk/proto/nebius/vpc/v1";
option java_multiple_files = true;
option java_outer_classname = "AllocationProto";
option java_package = "ai.nebius.pub.vpc.v1";

message Allocation {
  // Metadata for the Allocation.
  // `metadata.parent_id` represents IAM Container.
  common.v1.ResourceMetadata metadata = 1;

  // Specifications for the allocation, detailing its name and IP configuration.
  AllocationSpec spec = 2;

  // Contains the current status of the allocation, indicating its state and
  // any additional details.
  AllocationStatus status = 3;
}

message AllocationSpec {
  // IP specifications for the allocation.
  oneof ip_spec {
    option (buf.validate.oneof).required = true;

    IPv4PrivateAllocationSpec ipv4_private = 1;

    IPv4PublicAllocationSpec ipv4_public = 2;
  }
}

// Private IPv4 address configuration for the allocation.
message IPv4PrivateAllocationSpec {
  // A single IP address (e.g 10.1.2.1), a CIDR block (e.g., "10.1.2.0/24") or
  // a prefix length (e.g., "/32").
  // If prefix length is specified, the CIDR block will be auto-allocated from
  // the available space in the pool or subnet.
  // If not specified, defaults to "/32".
  string cidr = 1 [
    (buf.validate.field) = {
      cel: [
        {
          id: "string.valid_cidr",
          message: "value must be a valid IP address, CIDR or mask",
          expression: "this == '' || this.matches('^/([0-9]|[1-2][0-9]|3[0-2])$') || this.isIp(4) || this.isIpPrefix(4, true)"
        }
      ]
    },
    (field_behavior) = IMMUTABLE
  ];

  oneof pool {
    option (buf.validate.oneof).required = true;
    option (oneof_behavior) = IMMUTABLE;

    // ID of the subnet that allocation will be associated with.
    // IP address of the allocation must be within a CIDR block associated
    // with this subnet.
    // In order to assign an allocation to a resource (i.e. network interface)
    // both must be associated with the same subnet.
    string subnet_id = 2 [(field_behavior) = IMMUTABLE];

    // ID of the pool that allocation will receive its IP address from.
    string pool_id = 3 [(field_behavior) = IMMUTABLE];
  }
}

// Public IPv4 address configuration for the allocation.
message IPv4PublicAllocationSpec {
  // A single IP address (e.g. 1.2.3.4), a CIDR block (e.g., "1.2.3.4/24")
  // or a prefix length (e.g., "/32").
  // If prefix length is specified, the CIDR block will be auto-allocated from
  // the available space in the pool or subnet.
  // If not specified, defaults to "/32".
  string cidr = 1 [
    (buf.validate.field) = {
      cel: [
        {
          id: "string.valid_cidr",
          message: "value must be a valid IP address, CIDR or mask",
          expression: "this == '' || this.matches('^/([0-9]|[1-2][0-9]|3[0-2])$') || this.isIp(4) || this.isIpPrefix(4, true)"
        }
      ]
    },
    (field_behavior) = IMMUTABLE
  ];

  oneof pool {
    option (buf.validate.oneof).required = true;
    option (oneof_behavior) = IMMUTABLE;

    // ID of the subnet that allocation will be associated with.
    // IP address of the allocation must be within a CIDR block associated with
    // this subnet.
    // Assigning an allocation to a resource (i.e. network interface) requires
    // both to be associated with the same subnet.
    string subnet_id = 2 [(field_behavior) = IMMUTABLE];

    // ID of the pool that allocation will receive its IP address from.
    string pool_id = 3 [(field_behavior) = IMMUTABLE];
  }
}

message AllocationStatus {
  // Enumeration of possible states of the Allocation.
  enum State {
    STATE_UNSPECIFIED = 0; // Default state, unspecified.

    CREATING = 1; // Allocation is being created.

    ALLOCATED = 2; // Allocation is ready for use.

    ASSIGNED = 3; // Allocation is used.

    DELETING = 4; // Allocation is being deleted.
  }

  // This field represents the current state of the allocation.
  State state = 1;

  // Detailed information about the allocation status,
  // including the allocated CIDR, pool ID and IP version.
  AllocationDetails details = 2;

  // Information about the assignment associated with the allocation,
  // such as network interface or load balancer assignment.
  Assignment assignment = 3;

  // If false - Lifecycle of allocation depends on resource that using it.
  bool static = 4;
}

message AllocationDetails {
  // The actual CIDR block that has been allocated.
  string allocated_cidr = 1;

  // ID of the pool from which this allocation was made.
  string pool_id = 2;

  // The IP version of this allocation (IPv4 or IPv6).
  IpVersion version = 4;
}

message Assignment {
  // This field specifies the type of assignment associated with the allocation,
  // which could be a network interface or load balancer assignment.
  oneof type {
    NetworkInterfaceAssignment network_interface = 1;

    LoadBalancerAssignment load_balancer = 2;
  }
}

message NetworkInterfaceAssignment {
  // ID of the Compute instance network interface belongs to.
  string instance_id = 1;

  // Network interface name
  string name = 2;
}

message LoadBalancerAssignment {
  // ID of the Load Balancer.
  string id = 1;
}

syntax = "proto3";

package nebius.compute.v1alpha1;

import "nebius/annotations.proto";
import "nebius/common/v1/metadata.proto";
import "nebius/common/v1alpha1/operation.proto";
import "nebius/common/v1alpha1/operation_service.proto";
import "nebius/compute/v1alpha1/filesystem.proto";

option go_package = "github.com/nebius/gosdk/proto/nebius/compute/v1alpha1";

// Migrate to compute/v1.
option deprecated = true;
option java_multiple_files = true;
option java_outer_classname = "FilesystemServiceProto";
option java_package = "ai.nebius.pub.compute.v1alpha1";

service FilesystemService {
  // Migrate to compute/v1.
  option deprecated = true;
  option (api_service_name) = "compute";

  rpc Get(GetFilesystemRequest) returns (Filesystem);

  rpc GetByName(common.v1.GetByNameRequest) returns (Filesystem);

  rpc List(ListFilesystemsRequest) returns (ListFilesystemsResponse);

  rpc Create(CreateFilesystemRequest) returns (common.v1alpha1.Operation);

  rpc Update(UpdateFilesystemRequest) returns (common.v1alpha1.Operation);

  rpc Delete(DeleteFilesystemRequest) returns (common.v1alpha1.Operation);

  rpc ListOperationsByParent(common.v1alpha1.ListOperationsByParentRequest) returns (common.v1alpha1.ListOperationsResponse);
}

message GetFilesystemRequest {
  string id = 1;
}

message ListFilesystemsRequest {
  string parent_id = 1;

  int64 page_size = 2;

  string page_token = 3;

  string filter = 4 [
    deprecated = true,
    (field_deprecation_details) = {
      effective_at: "2025-06-16",
      description: "it is not implemented, filtering could be done on client side"
    }
  ];
}

message CreateFilesystemRequest {
  common.v1.ResourceMetadata metadata = 1;

  FilesystemSpec spec = 2;
}

message UpdateFilesystemRequest {
  common.v1.ResourceMetadata metadata = 1;

  FilesystemSpec spec = 2;
}

message DeleteFilesystemRequest {
  string id = 1;
}

message ListFilesystemsResponse {
  repeated Filesystem items = 1;

  string next_page_token = 2;
}

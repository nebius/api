syntax = "proto3";

package nebius.compute.v1alpha1;

import "buf/validate/validate.proto";
import "nebius/common/v1/metadata.proto";
import "nebius/annotations.proto";

option go_package = "github.com/nebius/gosdk/proto/nebius/compute/v1alpha1";

// Migrate to compute/v1.
option deprecated = true;
option java_multiple_files = true;
option java_outer_classname = "DiskProto";
option java_package = "ai.nebius.pub.compute.v1alpha1";

message Disk {
  common.v1.ResourceMetadata metadata = 1;

  DiskSpec spec = 2;

  DiskStatus status = 3;
}

message DiskSpec {
  reserved 7;

  enum DiskType {
    UNSPECIFIED = 0;

    // the list of available types will be clarified later, it is not final version
    NETWORK_SSD = 1;

    NETWORK_HDD = 2;

    NETWORK_SSD_NON_REPLICATED = 3;

    NETWORK_SSD_IO_M3 = 4;
  }

  oneof size {
    option (buf.validate.oneof).required = true;

    int64 size_bytes = 1 [(field_behavior) = IMMUTABLE];

    int64 size_kibibytes = 2 [(field_behavior) = IMMUTABLE];

    int64 size_mebibytes = 3 [(field_behavior) = IMMUTABLE];

    int64 size_gibibytes = 4 [(field_behavior) = IMMUTABLE];
  }

  int64 block_size_bytes = 5 [(field_behavior) = IMMUTABLE];

  DiskType type = 6 [(buf.validate.field).required = true, (field_behavior) = IMMUTABLE];

  oneof source {
    string source_image_id = 8 [(field_behavior) = IMMUTABLE];

    string source_image_family = 9 [(field_behavior) = IMMUTABLE];
  }
}

message DiskStatus {
  enum State {
    UNSPECIFIED = 0;

    CREATING = 1;

    READY = 2;

    UPDATING = 3;

    DELETING = 4;

    ERROR = 5;
  }

  State state = 1;

  string state_description = 2;

  string read_write_attachment = 3;

  repeated string read_only_attachments = 4;

  string source_image_id = 5;

  int64 size_bytes = 6;

  // Indicates whether there is an ongoing operation
  bool reconciling = 7;
}

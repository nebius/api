syntax = "proto3";

package nebius.compute.v1;

import "buf/validate/validate.proto";
import "nebius/common/v1/metadata.proto";
import "nebius/annotations.proto";
import "nebius/compute/v1/network_interface.proto";
import "nebius/compute/v1/maintenance_event.proto";

option go_package = "github.com/nebius/gosdk/proto/nebius/compute/v1";
option java_multiple_files = true;
option java_outer_classname = "InstanceProto";
option java_package = "ai.nebius.pub.compute.v1";

message Instance {
  common.v1.ResourceMetadata metadata = 1;

  InstanceSpec spec = 2;

  InstanceStatus status = 3;
}

message InstanceSpec {
  string service_account_id = 1 [(field_behavior) = IMMUTABLE];

  ResourcesSpec resources = 2 [(buf.validate.field).required = true];

  InstanceGpuClusterSpec gpu_cluster = 3 [(field_behavior) = IMMUTABLE];

  repeated NetworkInterfaceSpec network_interfaces = 4 [(buf.validate.field) = { repeated: { max_items: 8 }, required: true }];

  AttachedDiskSpec boot_disk = 5 [(field_behavior) = IMMUTABLE];

  repeated AttachedDiskSpec secondary_disks = 6 [(buf.validate.field) = { repeated: { max_items: 8 } }];

  repeated AttachedFilesystemSpec filesystems = 7 [
    (field_behavior) = IMMUTABLE,
    (buf.validate.field) = { repeated: { max_items: 8 } }
  ];

  string cloud_init_user_data = 8 [(sensitive) = true, (buf.validate.field) = { string: { max_len: 32768 } }];

  bool stopped = 13;

  InstanceRecoveryPolicy recovery_policy = 15 [(field_behavior) = IMMUTABLE];
}

message ResourcesSpec {
  string platform = 1 [(buf.validate.field).required = true, (field_behavior) = IMMUTABLE];

  oneof size {
    option (buf.validate.oneof).required = true;

    string preset = 2;
  }
}

message InstanceGpuClusterSpec {
  string id = 1;
}

message AttachedDiskSpec {
  enum AttachMode {
    UNSPECIFIED = 0;

    READ_ONLY = 1;

    READ_WRITE = 2;
  }

  AttachMode attach_mode = 1 [(buf.validate.field).required = true];

  oneof type {
    option (buf.validate.oneof).required = true;

    ExistingDisk existing_disk = 2;
  }

  // Specifies the user-defined identifier, allowing to use '/dev/disk/by-id/virtio-{device_id}' as a device path in mount command.
  string device_id = 3 [(buf.validate.field) = { string: { max_len: 20 } }];
}

message ExistingDisk {
  string id = 1 [(buf.validate.field).required = true];
}

message ExistingFilesystem {
  string id = 1 [(buf.validate.field).required = true];
}

message AttachedFilesystemSpec {
  enum AttachMode {
    UNSPECIFIED = 0;

    READ_ONLY = 1;

    READ_WRITE = 2;
  }

  AttachMode attach_mode = 1 [(buf.validate.field).required = true];

  // Specifies the user-defined identifier, allowing to use it as a device in mount command.
  string mount_tag = 2 [(buf.validate.field).required = true];

  oneof type {
    option (buf.validate.oneof).required = true;

    ExistingFilesystem existing_filesystem = 3;
  }
}

message InstanceStatus {
  enum InstanceState {
    UNSPECIFIED = 0;

    CREATING = 1;

    UPDATING = 2;

    STARTING = 3;

    RUNNING = 4;

    STOPPING = 5;

    STOPPED = 6;

    DELETING = 7;

    ERROR = 8;
  }

  InstanceState state = 1;

  repeated NetworkInterfaceStatus network_interfaces = 2;

  // Indicates whether there is an ongoing operation
  bool reconciling = 5;

  MaintenanceEventStatus maintenance_event = 6;
}

enum InstanceRecoveryPolicy {
  RECOVER = 0;

  FAIL = 1;
}

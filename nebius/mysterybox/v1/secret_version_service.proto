syntax = "proto3";

package nebius.mysterybox.v1;

import "nebius/common/v1/metadata.proto";
import "nebius/common/v1/operation.proto";
import "buf/validate/validate.proto";
import "nebius/mysterybox/v1/secret_version.proto";
import "nebius/annotations.proto";

option go_package = "github.com/nebius/gosdk/proto/nebius/mysterybox/v1";
option java_multiple_files = true;
option java_outer_classname = "SecretVersionServiceProto";
option java_package = "ai.nebius.pub.mysterybox.v1";

// A set of methods for managing secret's versions.
service SecretVersionService {
  option (api_service_name) = "cpl.mysterybox";

  // Creates a new secret version in the specified container.
  rpc Create(CreateSecretVersionRequest) returns (common.v1.Operation);

  // Returns the specified secret version, without its Payload.
  rpc Get(GetSecretVersionRequest) returns (SecretVersion);

  // Returns the list of secret versions in a specified container, without its Payload.
  rpc List(ListSecretVersionsRequest) returns (ListSecretVersionsResponse);

  // Soft delete secret version.
  rpc Delete(DeleteSecretVersionRequest) returns (common.v1.Operation);

  // Undelete secret version
  rpc Undelete(UndeleteSecretVersionRequest) returns (common.v1.Operation);
}

message CreateSecretVersionRequest {
  common.v1.ResourceMetadata metadata = 1;

  SecretVersionSpec spec = 2;
}

message GetSecretVersionRequest {
  // ID of secret versions to return.
  string id = 1 [(buf.validate.field).required = true];

  // By default, Get doesn't return resource if it is scheduled for deletion.
  // If show_scheduled_for_deletion = true, the Get operation returns the resource even if it is scheduled for deletion.
  // If show_scheduled_for_deletion = false, the Get method returns the NOT_FOUND gRPC status code.
  bool show_scheduled_for_deletion = 2;
}

message ListSecretVersionsRequest {
  // Secret id related to the version.
  string parent_id = 1 [(buf.validate.field).required = true];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListSecretVersionsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [
    (buf.validate.field) = {
      int64: { lte: 1000, gte: 0 },
      ignore: IGNORE_IF_UNPOPULATED
    }
  ];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListSecretVersionsResponse.next_page_token] returned by a previous list request.
  string page_token = 3;

  // By default, List operation doesn't include resources that are scheduled for deletion.
  // If show_scheduled_for_deletion = true, the listing includes resources that are scheduled for deletion.
  bool show_scheduled_for_deletion = 4;
}

message ListSecretVersionsResponse {
  // This token allows you to get the next page of results for list requests. If the number
  // of results is greater than the specified [ListSecretVersionsRequest.page_size], use
  // the [next_page_token] as the value for the [ListSecretVersionsRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;

  // List of secret versions in the specified container, without its Payload.
  repeated SecretVersion items = 3;
}

message DeleteSecretVersionRequest {
  // ID of the secret version to soft-delete.
  string id = 1 [(buf.validate.field).required = true];
}

message UndeleteSecretVersionRequest {
  // ID of the secret version to soft-delete.
  string id = 1 [(buf.validate.field).required = true];
}

syntax = "proto3";

package nebius.iam.v1;

import "buf/validate/validate.proto";
import "nebius/annotations.proto";
import "nebius/common/v1/metadata.proto";

option go_package = "github.com/nebius/gosdk/proto/nebius/iam/v1";
option java_multiple_files = true;
option java_outer_classname = "FederatedCredentialsProto";
option java_package = "ai.nebius.pub.iam.v1";

message FederatedCredentials {
  common.v1.ResourceMetadata metadata = 1 [(buf.validate.field).required = true];

  FederatedCredentialsSpec spec = 2 [(buf.validate.field).required = true];

  FederatedCredentialsStatus status = 3 [(field_behavior) = OUTPUT_ONLY];
}

message FederatedCredentialsSpec {
  // provider of federated credentials used for federated subject authentication
  oneof credentials_provider {
    option (buf.validate.oneof).required = true;

    OidcCredentialsProvider oidc_provider = 1;
  }

  string federated_subject_id = 101 [(buf.validate.field).required = true];

  // IAM subject, in which federated subject will be impersonated to.
  // E.g. for workload identities it will be IAM service account.
  string subject_id = 111 [(buf.validate.field).required = true];
}

message OidcCredentialsProvider {
  // *
  // It's not required provider OIDC issuer should be real OIDC provider, but should expose OIDC configuration
  // with "/.well-known/openid-configuration" endpoint. Configuration should contains the "jwks_uri" endpoint
  // where the JSON Web Key Set (JWKS) can be found; this set contains public keys used to verify
  // JSON Web Tokens (JWTs) issued by an identity provider.
  string issuer_url = 1 [(buf.validate.field).required = true];

  // *
  // Literally json, which represents JWKS with public keys for JWT verification
  string jwk_set_json = 2;
}

message FederatedCredentialsStatus {
}

syntax = "proto3";

package nebius.common.error.v1alpha1;

import "nebius/common/error/v1alpha1/common_errors.proto";

option go_package = "github.com/nebius/gosdk/proto/nebius/common/error/v1alpha1";

// Migrate to common/v1.
option deprecated = true;
option java_multiple_files = true;
option java_outer_classname = "ErrorProto";
option java_package = "ai.nebius.pub.common.error.v1alpha1";

message ServiceError {
  // Migrate to common/v1.
  option deprecated = true;

  // ID of Service which the error originated in. E.g. "dns".
  string service = 1;

  // Detailed error code, service-specific. E.g. "DnsZoneNotEmpty".
  // Name of the exception, without Exception suffix if not set
  // Example: for PermissionDeniedException -> code == PermissionDenied
  string code = 2;

  // Additional message describing the error, if any.
  oneof details {
    BadRequest bad_request = 100;

    BadResourceState bad_resource_state = 110;

    ResourceNotFound resource_not_found = 111;

    ResourceAlreadyExists resource_already_exists = 112;

    OutOfRange out_of_range = 113;

    PermissionDenied permission_denied = 120;

    ResourceConflict resource_conflict = 130;

    OperationAborted operation_aborted = 131;

    TooManyRequests too_many_requests = 140;

    QuotaFailure quota_failure = 141;

    InternalError internal_error = 999;
  }

  // Retry type tells how to provide retry, e.g.: just a single call or the whole logic before it.
  RetryType retry_type = 30;

  enum RetryType {
    UNSPECIFIED = 0;

    // Just retry the failed call.
    CALL = 1;

    // Retry whole logic before call and make a new one.
    UNIT_OF_WORK = 2;

    // Do not retry, this is a fatal error.
    NOTHING = 3;
  }
}
